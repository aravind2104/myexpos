breakpoint;
alias functionNum R1;
alias currentPID R2;

//Acquire Disk
if(functionNum==3)then
    while([DISK_STATUS_TABLE] == 1)do
        [PROCESS_TABLE + currentPID*16 + 4] = WAIT_DISK;
        multipush(R1,R2);
        call MOD_5;
        multipop(R1,R2);
    endwhile;
    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;
    breakpoint;
    return;
endif;

//Acquire Semaphore
if(functionNum==6)then
    //Find Index of free Entry in Semaphore Table. If no entry,return -1
    R3 = 0;
    while(R3 < MAX_SEM_COUNT) do
        if([SEMAPHORE_TABLE + R3*4 + 1]==0) then
            break;
        endif;
        R3 = R3 + 1;
    endwhile;
    //If no free entry, return -1
    if(R3 == MAX_SEM_COUNT) then
        R0 = -1;
        return;
    endif;
    //Set Process Count and Locking PID
    [SEMAPHORE_TABLE + R3*4] = -1;
    [SEMAPHORE_TABLE + R3*4 + 1] = 1;
    //return Semaphore Table Index;
    R0 = R3;
    breakpoint;
    return;
endif;

//Release Semaphore
if(functionNum==7)then
    //If locking PID is current Process
    if([SEMAPHORE_TABLE + R2*4] == R3)then
        //Unlock Semaphore
        [SEMAPHORE_TABLE + R2*4] = -1;
        R4 = 0;
        //Wake up processes blocked by semaphore
        while(R4 < 16)do
            if([PROCESS_TABLE + R4*16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + R4*16 + 5] == R2)then
                [PROCESS_TABLE + R4*16 + 4] = READY;
                [PROCESS_TABLE + R4*16 + 5] = -1;
            endif;
            R4 = R4 + 1;
        endwhile;
    endif;
    //Decrement process Count
    [SEMAPHORE_TABLE + R2*4 + 1] = [SEMAPHORE_TABLE + R2*4 + 1] - 1;
    breakpoint;
    return;
endif;

//Acquire Terminal
if(functionNum==8)then
    while([TERMINAL_STATUS_TABLE] == 1)do
        [PROCESS_TABLE + currentPID*16 + 4] = WAIT_TERMINAL;
        multipush(R1,R2);
        call MOD_5;
        multipop(R1,R2);
    endwhile;
    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    breakpoint;
    return;
endif;

//Release Terminal
if(functionNum == 9)then
    if(currentPID != [TERMINAL_STATUS_TABLE + 1])then
        R0 = -1;
        return;
    endif;
    [TERMINAL_STATUS_TABLE] = 0;
    R3 = 1;
    while(R3 < 16) do
        if([PROCESS_TABLE + R3*16 + 4]==WAIT_TERMINAL)then
            [PROCESS_TABLE + R3*16 + 4] = READY;
        endif;
        R3 = R3 + 1;
    endwhile;
    R0 = 0;
    breakpoint;
    return;
endif;

return;