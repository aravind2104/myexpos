breakpoint;
//Setting Kernel Stack
alias userSP R0;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +13]=userSP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +11]*512-1;

//Mode Flag to System Call no
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +9] = 9;
PTBR = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +14];    

//Filename Argument
alias fileName R1;
fileName = [[PTBR+2*((userSP-4)/512)]*512+((userSP-4)%512)];

//Search the memory copy of the inode table for the file
alias fileIndex R2;
fileIndex=0;
while(fileIndex<60) do
    if([INODE_TABLE + fileIndex*16 + 1]==fileName) then
        if([INODE_TABLE + fileIndex*16]==3)then
            break;
        endif;
    endif;
    fileIndex = fileIndex + 1;
endwhile;
//File is not present
if(fileIndex==60) then
    [[PTBR + 2*((userSP-1)/512)]*512 + ((userSP-1)%512)] = -1;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 +9] = 0;
    SP = userSP;
    ireturn;
endif;

//Save inode index of file in a register i.e R2

//Call Exit Process function in Process Manager Module
multipush(R0,R1,R2);
R1 = 3;
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
multipop(R0,R1,R2);

//Get user area page no from process table. Page has been deallocated by Exit Process function
//Reclaim same page by incrementing memory free list entry of user area page and decrementing MEM_FREE_COUNT
alias usrAreaPage R3;
usrAreaPage = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11];
if([MEMORY_FREE_LIST + usrAreaPage] == 0)then
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] -1;
endif;
[MEMORY_FREE_LIST + usrAreaPage] = [MEMORY_FREE_LIST + usrAreaPage] + 1;

//Set the SP to the start of the user area page to intialize the kernel stack of the new process.
SP = usrAreaPage*512 - 1;

//New process uses the PID of the terminated process. Update the STATE field to RUNNING and store inode index obtained above in the inode index field in the process table
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 4] = RUNNING;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 7] = fileIndex;

//Per Process Table, simply -1 for all entries
R4 = (usrAreaPage+1)*512 - 16;
while(R4<(usrAreaPage+1)*512) do
	[R4] = -1;
	R4 = R4 + 1;
endwhile; 

//Allocate new pages and set the page table entries for the new process.
//(i)Set the library page entries in the page table.
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100"; 

//(ii)Invoke the Get Free Page function to allocate 2 stack and 2 heap pages
multipush(R0,R1,R2,R3);
//Heap 1
[PTBR+4] = -1;
[PTBR+5] = "0000";
//Heap 2
[PTBR+6] = -1;
[PTBR+7] = "0000";
//Stack 1
R1 = 1;
call MOD_2;
[PTBR+16] = R0;
[PTBR+17] = "0110";
//Stack 2
R1=1;
call MOD_2;
[PTBR+18] = R0;
[PTBR+19] = "0110";
multipop(R0,R1,R2,R3);

//(iii)Find out the number of blocks occupied by the file from inode table. 
//Allocate same number of code pages by invoking the Get Free Page function 
//Update the page table entries.
[PTBR+8] = -1;
[PTBR+9] = "0000";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";
//Get code Page
multipush(R0,R1,R2,R3,R4);
R1 = 5;
R2 = [INODE_TABLE + 16*fileIndex + 8];
call MOD_2;
[PTBR + 8] = R0;
[PTBR + 9] = "0100";
multipop(R0,R1,R2,R3,R4);

//Initializing disk map table entries
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 0] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 1] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 2] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 3] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 4] = [INODE_TABLE + fileIndex*16 + 8];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 5] = [INODE_TABLE + fileIndex*16 + 9];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 6] = [INODE_TABLE + fileIndex*16 + 10];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 7] = [INODE_TABLE + fileIndex*16 + 11];
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 8] = -1;
[DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE + 1]*10 + 9] = -1;

//Store the entry point IP (present in the header of first code page) value on top of the user stack.
SP = 8*512; 
[[PTBR+16]*512]=[[PTBR+8]*512 + 1];
//Change SP to user stack
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
//change the MODE FLAG back to user mode.
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = 0;
BP = SP - 1;
breakpoint;
ireturn;
