//MODE Flag to -1, indicating exception handler
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 9] = -1;

//Switch to Kernel Stack
//User Stack is Full
if(SP == PTLR*512 - 1) then
    print "UserSPFull";
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1; //Exit Process
    halt;
endif;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE+1]*16 + 11]*512 - 1;
backup;
//Push EIP into stack
multipush(EIP);

//Other than page fault(EC not equal to 0), Exit Process and halt process to invoke scheduler
if(EC!=0) then
    print "Error";
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_1;
    halt;
endif;

//Page fault
//If due to Code Page, get code block from disk map table. Invoke Get Code Page and update page table entry
if(EPN/512>=4 && EPN/512<8) then
    multipush(R0,R1,R2);
    R2 = [DISK_MAP_TABLE + 10*[SYSTEM_STATUS_TABLE + 1] + EPN];
    R1 = 5;
    call MOD_2;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2] = R0;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + EPN*2 + 1] = "1100";
    multipop(R0,R1,R2);
//If due to Heap page, invoke Get Free Page to allocate two memory pages for heap, and update Page table entries
else
    multipush(R0,R1,R2);
    R1 = 1;
    call MOD_2;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 4] = R0;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 5] = "1110";
    R1 = 1;
    call MOD_2;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 6] = R0;
    [PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + 7] = "1110";
    multipop(R0,R1,R2);
endif;

//Reset MODE Flag and pop EIP and restore register context
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
multipop(EIP);
restore;

//Change to user Stack
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13];
//Increment SP and Store EIP at that location, return to user mode
SP = SP + 1;
[[PAGE_TABLE_BASE + [SYSTEM_STATUS_TABLE + 1]*20 + (SP/512)*2]*512 + (SP%512)] = EIP;
ireturn;

