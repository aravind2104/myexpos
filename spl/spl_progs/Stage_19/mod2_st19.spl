breakpoint;
//Memory Manager Module
alias functionNum R1;

//Get Free Page
if(functionNum==1) then
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;

    while([SYSTEM_STATUS_TABLE + 2]==0) do
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 4] = WAIT_MEM;
        multipush(R1);
        call MOD_5;
        multipop(R1);
    endwhile;

    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    
    R2 = 57*512;
    while([R2]!=0) do 
        R2 = R2 + 1;
    endwhile;
    [R2] = 1;
    R0 = R2 - 57*512;
    breakpoint;
    return;
endif;

//Release Page
if(functionNum == 2) then
    alias pageNo R2;
    [57*512 + pageNo] = [57*512 + pageNo] - 1;
    if([57*512 + pageNo] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    endif;
    R3 = 1;
    while(R3<16) do
        if([PROCESS_TABLE + R3*16 + 4]==WAIT_MEM) then
            [PROCESS_TABLE + R3*16 + 4] = READY;
        endif;
        R3 = R3 + 1;
    endwhile;
    breakpoint;
    return;
endif;

//Release Block
if(functionNum == 4) then
    alias blockNo R2;
    alias currentPID R3;
    [DISK_FREE_LIST + blockNo] = [DISK_FREE_LIST + blockNo] - 1; 
    breakpoint;
    return;
endif;

//Get Code Page
if(functionNum == 5) then
    alias blockNo R2;
    R3 = 0;
    while(R3<160) do
        if([DISK_MAP_TABLE + R3]==blockNo) then
            R4 = R3/10; //PID
            R5 = R3%10; //Disk Map Table entry
            if([PAGE_TABLE_BASE + R4*20 + R5*2]!=-1)then
                R0 = [PAGE_TABLE_BASE + R4*20 +R5*2];
                [MEMORY_FREE_LIST + R0]=[MEMORY_FREE_LIST + R0] + 1;
                return;
            endif;
        endif;
        R3=R3+1;
    endwhile;
    multipush(R0,R1,R2);
    R1 = 1;
    call MOD_2;
    R3 = R0; //Memory Page
    multipop(R0,R1,R2);

    multipush(R0,R1,R2,R3);
    R1 = 2;
    R4 = blockNo;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = R3;
    call MOD_4;
    multipop(R0,R1,R2,R3);

    R0 = R3;
    breakpoint;
    return;
endif;

breakpoint;
return;