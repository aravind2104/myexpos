breakpoint;
alias userSP R1;
userSP = SP;
alias ptEntry R7;
ptEntry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

//Switch to Kernel Stack
[ptEntry + 13] = SP;
SP = [ptEntry + 11]*512 -1;

//Extract Syscall no
alias syscallNo R2;
syscallNo = [[PTBR + ((userSP-5)/512)*2]*512 + (userSP-5)%512];
//Extract file name
alias fileName R3;
fileName = [[PTBR + ((userSP-4)/512)*2]*512 + (userSP-4)%512];

//Create System Call (Syscall No 1)
if(syscallNo == 1)then
    [ptEntry + 9] = 1;
    //Extract Permission
    alias permBit R4;
    permBit = [[PTBR + ((userSP-3)/512)*2]*512 + (userSP-3)%512];
    
    //If file is present in system, return 0
    alias inodeIndex R5;
    inodeIndex = 0;
    while(inodeIndex < MAX_FILE_NUM)do
        if([INODE_TABLE + inodeIndex*16 + 1] == fileName) then
            [ptEntry + 9] = 0;
            [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = 0;//Return value
            SP = userSP;
            ireturn;
        endif;
        inodeIndex = inodeIndex + 1;
    endwhile;

    //Find index of Free entry
    inodeIndex = 0;
    while(inodeIndex < MAX_FILE_NUM) do
        if([INODE_TABLE + inodeIndex*16 + 1] == -1) then
            break;
        endif;
        inodeIndex = inodeIndex + 1;
    endwhile;

    //If free Entry not found, return -1
    if(inodeIndex == MAX_FILE_NUM)then
        [ptEntry + 9] = 0;
        [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -1;//Return value
        SP = userSP;
        ireturn;
    endif;
    
    //In the Inode Table entry found above, set FILE NAME to the given file name, FILE SIZE to 0 and FILE TYPE to DATA.
    R6 = INODE_TABLE + inodeIndex*16;
    [R6 + 1] = fileName;
    [R6 + 2] = 0;
    [INODE_TABLE + inodeIndex*16] = DATA;
    //Set block numbers to -1
    [R6 + 8] = -1;
    [R6 + 9] = -1;
    [R6 + 10] = -1;
    [R6 + 11] = -1;
    //Set USER ID same as process USERID
    [R6 + 3] = [ptEntry + 3];
    //Set Permission as given in argument
    [R6 + 4] = permBit;

    //In the Root file entry corresponding to the Inode Table index, 
    //set the FILE NAME, FILE SIZE, FILE TYPE, USERNAME and PERMISSION fields.
    R8 = ROOT_FILE + inodeIndex*8;
    [R8] = fileName; //FILE NAME
    [R8 + 1] = 0; //FILE SIZE
    [R8 + 2] = DATA; //FILE TYPE
    [R8 + 3] = [USER_TABLE + [ptEntry + 3]*2]; //USERNAME
    [R8 + 4] = permBit; //PERMISSION

    //Return from system call with 0;
    [ptEntry + 9] = 0;
    [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = 0;//Return value
    SP = userSP;
    breakpoint;
    ireturn;
endif;

//Delete System Call (Syscall No 4)
if(syscallNo == 4) then
    [ptEntry + 9] = 4;
    //Find index of file in Inode Table
    alias inodeIndex R4;
    inodeIndex = 0;
    while(inodeIndex < MAX_FILE_NUM) do
        if([INODE_TABLE + inodeIndex*16 + 1] == fileName) then
            break;
        endif;
        inodeIndex = inodeIndex + 1;
    endwhile;

    //If file is not present, return 0
    if(inodeIndex == MAX_FILE_NUM)then
        [ptEntry + 9] = 0;
        [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = 0;//Return value
        SP = userSP;
        ireturn;
    endif;

    //If the file is not a DATA file, return -1.
    if([INODE_TABLE + inodeIndex*16] != DATA) then
        [ptEntry + 9] = 0;
        [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -1;//Return value
        SP = userSP;
        breakpoint;
        ireturn;
    endif;

    //If exclusive Permission is set
    if([INODE_TABLE + inodeIndex*16 + 4] == EXCLUSIVE) then
        //If current user is not root and current user does not own file, return -1
        if([ptEntry + 3] != ROOT && [INODE_TABLE + inodeIndex*16 + 3] != [ptEntry + 3]) then
            [ptEntry + 9] = 0;
            [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -1;//Return value
            SP = userSP;
            breakpoint;
            ireturn;
        endif;
    endif;

    //Acquire lock on the file
    multipush(R1,R2,R3,R4,R7);
    R1 = ACQUIRE_INODE; //Function Number 4
    R2 = inodeIndex;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0; //Resource Manager
    multipop(R1,R2,R3,R4,R7);

    //Check if file open count is -1 in File Status Table
    //If not release lock, return -2
    if([FILE_STATUS_TABLE + inodeIndex*4 + 1] != -1) then
        multipush(R1,R2,R3,R4,R7);
        R1 = RELEASE_INODE; //Function Number 5
        R2 = inodeIndex;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_0; //Resource Manager
        multipop(R1,R2,R3,R4,R7);
        [ptEntry + 9] = 0;
        [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -2;//Return value
        SP = userSP;
        breakpoint;
        ireturn;
    endif;

    //For each disk block allocated
    R5 = 0;
    while(R5 < 4) do
        R6 = [INODE_TABLE + inodeIndex*16 + 8 + R5];
        if(R6 != -1)then
            if([BUFFER_TABLE + (R6 % MAX_BUFFER)*4] == R6)then
                [BUFFER_TABLE + (R6 % MAX_BUFFER)*4 + 1] = 0;
            endif;
            multipush(R1,R2,R3,R4,R5,R6,R7);
            R1 = RELEASE_BLOCK; //Function 4
            R2 = R6;
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call MOD_2; //Memory Manager
            multipop(R1,R2,R3,R4,R5,R6,R7);
        endif;
        R5 = R5 + 1;
    endwhile;

    //Invalidate(-1) Inode Table entry of file
    [INODE_TABLE + inodeIndex*16 + 1] = -1;

    //Update Root File, by invalidating entry
    [ROOT_FILE + inodeIndex*8] = -1;
    [ROOT_FILE + inodeIndex*8 + 3] = -1;

    //Release the lock on file
    multipush(R1,R2,R3,R4,R7);
    R1 = RELEASE_INODE; //Function Number 5
    R2 = inodeIndex;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0; //Resource Manager
    multipop(R1,R2,R3,R4,R7);

    //Switch back to user mode, with return value 0
    [ptEntry + 9] = 0;
    [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = 0;//Return value
    SP = userSP;
    breakpoint;
    ireturn;
endif;