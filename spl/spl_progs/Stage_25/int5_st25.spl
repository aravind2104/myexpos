breakpoint;
alias userSP R1;
userSP = SP;
alias ptEntry R7;
ptEntry = PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16;

//Switch to Kernel Stack
[ptEntry + 13] = SP;
SP = [ptEntry + 11]*512 -1;

//Extract Syscall no
alias syscallNo R2;
syscallNo = [[PTBR + ((userSP-5)/512)*2]*512 + (userSP-5)%512];

//Open System Call
if(syscallNo == 2)then
    [ptEntry + 9] = 2;
    alias freeEntry R3;
    R3 = 0;
    //Find free Per-Process Table Entry
    while(R3<8)do
        if([[ptEntry + 11]*512 + RESOURCE_TABLE_OFFSET + R3*2] == -1)then
            break;
        endif;
        R3 = R3 + 1;
    endwhile;
    //If no free entry return -3
    if(R3 == 8)then
        [ptEntry + 9] = 0;
        [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -3;//Return value
        SP = userSP;
        breakpoint;
        ireturn;
    endif;
    //Extract fileName from arguments
    alias fileName R4;
    fileName = [[PTBR + ((userSP-4)/512)*2]*512 + (userSP-4)%512];
    //Call Open function from File Manager Module
    multipush(R1,R2,R3,R4,R7);
    R1 = OPEN; //Function 3
    R2 = R4; //fileName
    call MOD_3; //File Manager Module
    multipop(R1,R2,R3,R4,R7);
    //R0 contains Open File Table Entry
    //If locking fails(deleted file),or if Exec file return -1;
    if(R0 == -1)then
        [ptEntry + 9] = 0;
        [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -1;//Return value
        SP = userSP;
        breakpoint;
        ireturn;
    endif;
    //If no free entries in Open File Table, return -2
    if(R0 == -2)then
        [ptEntry + 9] = 0;
        [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -2;//Return value
        SP = userSP;
        breakpoint;
        ireturn;
    endif;
    //Set Per-Process Table Entry
    [[ptEntry + 11]*512 + RESOURCE_TABLE_OFFSET + R3*2] = FILE;
    [[ptEntry + 11]*512 + RESOURCE_TABLE_OFFSET + R3*2 + 1] = R0;
    //Return process, return value, changing stack, resetting mode flag
    [ptEntry + 9] = 0;
    [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = R3;//Return value
    SP = userSP;
    breakpoint;
    ireturn;
endif;

//Close System Call
if(syscallNo == 3)then
    [ptEntry + 9] = 3;
    //Extract file descriptor(index of per-process table entry) from arguments
    alias fileDesc R3;
    fileDesc = [[PTBR + ((userSP-4)/512)*2]*512 + (userSP-4)%512];
    //If fileDesc is invalid, return -1
    if(fileDesc < 0 || fileDesc > 7 || [[ptEntry + 11]*512 + RESOURCE_TABLE_OFFSET + fileDesc*2] != FILE)then
        [ptEntry + 9] = 0;
        [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -1;//Return value
        SP = userSP;
        breakpoint;
        ireturn;
    endif;
    //Get index of Open File Table from Per-Process Table Entry
    alias oftIndex R4;
    oftIndex = [[ptEntry + 11]*512 + RESOURCE_TABLE_OFFSET + fileDesc*2 + 1];
    //Call Close function of File Manager Module
    multipush(R1,R2,R3,R4,R7);
    R1 = CLOSE; //Function 4
    R2 = R4; //Open File Table Index
    call MOD_3; //File Manager Module
    multipop(R1,R2,R3,R4,R7);
    //Invalidate Per-Process Table Entry
    [[ptEntry + 11]*512 + RESOURCE_TABLE_OFFSET + R3*2] = -1;
    [[ptEntry + 11]*512 + RESOURCE_TABLE_OFFSET + R3*2 + 1] = -1;
    //Return process, return value, changing stack, resetting mode flag
    [ptEntry + 9] = 0;
    [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = 0;//Return value
    SP = userSP;
    breakpoint;
    ireturn;
endif;

//Seek System Call
if(syscallNo == 6)then
    //Extract file descriptor and offset
    alias fileDesc R3;
    fileDesc = [[PTBR + ((userSP-4)/512)*2]*512 + (userSP-4)%512];
    alias offset R4;
    offset = [[PTBR + ((userSP-3)/512)*2]*512 + (userSP-3)%512];
    //Set mode flag
    [ptEntry + 9] = 6;
    //If file descriptor invalid, return -1
    if(fileDesc < 0 || fileDesc > 7)then
        [ptEntry + 9] = 0;
        [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -1;//Return value
        SP = userSP;
        breakpoint;
        ireturn;  
    endif;
    //Locate Per Process Table of current resource and check if valid,else return -1
    if([[ptEntry + 11]*512 + RESOURCE_TABLE_OFFSET + fileDesc*2]==-1 || [[ptEntry + 11]*512 + RESOURCE_TABLE_OFFSET + fileDesc*2]!=FILE)then
        [ptEntry + 9] = 0;
        [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -1;//Return value
        SP = userSP;
        breakpoint;
        ireturn;
    endif; 
    //Get Index of Open File Table Entry
    alias oftEntry R5;
    oftEntry = [[ptEntry + 11]*512 + RESOURCE_TABLE_OFFSET + fileDesc*2 + 1];
    //Get index of inode table Entry
    alias inodeIndex R6;
    inodeIndex = [OPEN_FILE_TABLE + oftEntry*4];
    //Lock the inode using acquire_inode()
    multipush(R1,R2,R3,R4,R5,R6,R7);
    R1 = ACQUIRE_INODE; //function 4
    R2 = inodeIndex;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5,R6,R7);
    //If locking fails, return -1
    if(R0 == -1)then
        [ptEntry + 9] = 0;
        [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -1;//Return value
        SP = userSP;
        breakpoint;
        ireturn;
    endif;
    //Get current Lseek position
    //Check validity of given offset
    //Get file size
    alias fileSize R8;
    if(inodeIndex == INODE_ROOT)then
        fileSize = 480;
    else
        fileSize = [INODE_TABLE + inodeIndex*16 + 2];
    endif;
    //If (lseek + offset) less than 0, release_inode() and return -2
    if([OPEN_FILE_TABLE + oftEntry*4 + 2] + offset < 0)then
        multipush(R1,R2,R3,R4,R5,R6,R7,R8);
        R1 = RELEASE_INODE; //function 5
        R2 = inodeIndex;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_0;
        multipop(R1,R2,R3,R4,R5,R6,R7,R8);
        [ptEntry + 9] = 0;
        [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -2;//Return value
        SP = userSP;
        breakpoint;
        ireturn;
    endif;
    //If given offset is 0
    if(offset == 0)then
        //Set lseek value to 0
        [OPEN_FILE_TABLE + oftEntry*4 + 2] = 0;
    else
        //if lseek+offset greater than file size
        if([OPEN_FILE_TABLE + oftEntry*4 + 2] + offset > fileSize)then
            //Set lseek value to file size
            [OPEN_FILE_TABLE + oftEntry*4 + 2] = fileSize;
        else
            //Change lseek value in Open File Table entry to lseek+offset
            [OPEN_FILE_TABLE + oftEntry*4 + 2] = [OPEN_FILE_TABLE + oftEntry*4 + 2] + offset;
        endif;
    endif;
    //Free the inode using release_inode() and return 0(success)
    multipush(R1,R2,R3,R4,R5,R6,R7,R8);
    R1 = RELEASE_INODE; //function 5
    R2 = inodeIndex;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5,R6,R7,R8);
    [ptEntry + 9] = 0;
    [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = 0;//Return value
    SP = userSP;
    breakpoint;
    ireturn;
endif;