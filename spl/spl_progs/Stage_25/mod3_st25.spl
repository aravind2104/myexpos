breakpoint;
alias functionNum R1;

//Buffered Write
if(functionNum == 1)then
    alias BlockNum R2;
    alias offset R3;
    alias word R4;
    alias BufferNum R5;
    BufferNum = (BlockNum % 4);
    //Acquire the buffer
    multipush(R1,R2,R3,R4,R5);
    R1 = ACQUIRE_BUFFER; //function 1
    R2 = BufferNum;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5);
    alias buff R6;
    buff = BUFFER_TABLE + BufferNum*4;
    //if buffer contains a different disk block
    if([buff] != BlockNum)then
        //If buffer contents are dirty
        if([buff + 1] == 1)then
            //Write back contents to disk using disk_store()
            multipush(R1,R2,R3,R4,R5,R6);
            R1 = DISK_STORE; //function 1
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = 71 + BufferNum;
            R4 = [buff];
            call MOD_4;
            multipop(R1,R2,R3,R4,R5,R6);
        endif;
        //Load the required disk block using disk_load()
        multipush(R1,R2,R3,R4,R5,R6);
        R1 = DISK_LOAD; //function 2
        R4 = BlockNum;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = 71 + BufferNum;
        call MOD_4;
        multipop(R1,R2,R3,R4,R5,R6);
        //Set new disk block number in Buffer Table
        [buff] = BlockNum;
    endif;
    //Write content of word taken as input into offset location in buffer
    [(71 + BufferNum)*512 + offset] = word;
    [buff + 1] = 1;
    //Release the buffer
    R1 = RELEASE_BUFFER; //function 2
    R2 = BufferNum;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    breakpoint;
    return;
endif;

//Buffered Read
if(functionNum == 2)then
    alias BlockNum R2;
    alias offset R3;
    alias memAddr R4;
    //Identify Buffer Number
    alias BufferNum R5;
    BufferNum = BlockNum % 4;
    //Acquire Buffer
    multipush(R1,R2,R3,R4,R5);
    R1 = ACQUIRE_BUFFER;
    R2 = BufferNum;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1,R2,R3,R4,R5);
    alias buff R6;
    buff = BUFFER_TABLE + BufferNum*4;
    //If Buffer contains different Block
    if([buff] != BlockNum)then
        //If Buffer contents are dirty
        if([buff + 1] == 1)then
            //Write back contents by invoking disk_store()
            multipush(R1,R2,R3,R4,R5,R6);
            R1 = DISK_STORE;
            R4 = [buff];
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = 71 + BufferNum;
            call MOD_4; //Device Manager
            multipop(R1,R2,R3,R4,R5,R6);
            //Mark the buffer as clean
            [buff + 1] = 0;
        endif;
        //Load required disk block into buffer by invoking disk_load()
        multipush(R1,R2,R3,R4,R5,R6);
        R1 = DISK_LOAD;
        R4 = BlockNum;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        R3 = 71 + BufferNum;
        call MOD_4;
        multipop(R1,R2,R3,R4,R5,R6);
        //Set new Disk block in Buffer Table Entry 
        [buff] = BlockNum;
    endif;

    //Copy contents in offset location in the buffer to physical address(input)
    [memAddr] = [(71 + BufferNum)*512 + offset];

    //Release the buffer by calling Release_Buffer()
    R1 = RELEASE_BUFFER;
    R2 = BufferNum;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    breakpoint;
    return;
endif;

//Open
if(functionNum == 3)then
    alias fileName R2;
    alias inodeIndex R3;
    R3 = 0;
    while(R3<MAX_FILE_NUM)do
        if([INODE_TABLE + R3*16 + 1] == fileName)then
            break;
        endif;
        R3 = R3 + 1;
    endwhile;
    if(R3 == MAX_FILE_NUM)then
        R0 = -1;
        breakpoint;
        return;
    endif;
    multipush(R1,R2,R3);
    R1 = 4; //Acquire Inode
    R2 = R3;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1,R2,R3);
    //If locking fails return -1
    if(R0 == -1)then
        breakpoint;
        return;
    endif;
    //If file type is Exec, release inode and return -2
    if([INODE_TABLE + R3*16] == EXEC)then
        multipush(R1,R2,R3);
        R1 = 5; //Release Inode
        R2 = R3;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_0;
        multipop(R1,R2,R3);
        R0 = -2;
        breakpoint;
        return;
    endif;
    //Find a free Entry in Open File Table
    R4 = 0;
    while(R4 < MAX_OPENFILE_NUM) do
        if([OPEN_FILE_TABLE + R4*4] == -1)then
            break;
        endif;
        R4 = R4 + 1;
    endwhile;
    //If no free entries,release inode and return -2
    if(R4 == MAX_OPENFILE_NUM)then
        multipush(R1,R2,R3,R4);
        R1 = 5; //Release Inode
        R2 = R3;
        R3 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_0;
        multipop(R1,R2,R3,R4);
        R0 = -2;
        breakpoint;
        return;
    endif;
    alias oftEntry R5;
    oftEntry = OPEN_FILE_TABLE + R4*4;
    //If file name is root
    if([INODE_TABLE + R3*16 + 1] == "root")then
        //Set inode index field in open file table entry to INODE_ROOT
        [oftEntry] = INODE_ROOT;
    else
        if([FILE_STATUS_TABLE + inodeIndex*4 + 1] == -1)then
            [FILE_STATUS_TABLE + inodeIndex*4 + 1] = 1; 
        else
            [FILE_STATUS_TABLE + inodeIndex*4 + 1] = [FILE_STATUS_TABLE + inodeIndex*4 + 1] + 1; 
        endif;
        [oftEntry] = inodeIndex;
    endif;
    [oftEntry + 1] = 1;
    [oftEntry + 2] = 0;

    multipush(R1,R2,R3,R4);
    R1 = 5; //Release Inode
    R2 = R3;
    R3 = [SYSTEM_STATUS_TABLE + 1];
    call MOD_0;
    multipop(R1,R2,R3,R4);

    R0 = R4;
    breakpoint;
    return;
endif;

//Close
if(functionNum == 4)then
    alias oftEntry R2;
    alias inodeIndex R3;
    oftEntry = OPEN_FILE_TABLE + oftEntry*4;
    //Find index of inode table entry
    inodeIndex = [oftEntry];
    //Decrement Open Instance Count
    [oftEntry + 1] = [oftEntry + 1] - 1;
    //If open instance count becomes zero
    if([oftEntry + 1] == 0)then
        //Invalidate the entry
        [oftEntry] = -1;
        [oftEntry + 1] = -1;
        [oftEntry + 2] = -1;
        //If file is not root, decrement file open File Status Table
        alias ftEntry R4;
        R4 = FILE_STATUS_TABLE + inodeIndex*4;
        if([INODE_TABLE + inodeIndex*16 ]!=ROOT)then
            [R4 + 1] = [R4 + 1] - 1; 
        endif;
        if([R4 + 1] == 0)then
            [R4 + 1] = -1;
        endif;
    endif;
    breakpoint;
    return;
endif;