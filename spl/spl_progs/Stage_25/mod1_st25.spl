breakpoint;
//Process Manager Module
alias functionNum R1;
alias currentPID R2;

//Get PCB Entry
if(functionNum==1) then
    R0 = 0;
    while(R0<16) do
    R3 = PROCESS_TABLE + R0*16;
        if([R3 + 4] == TERMINATED ) then
            [R3 + 1] = R0; //PID
            [R3 + 4] = ALLOCATED; //State
            [R3 + 14] = PAGE_TABLE_BASE + 20*R0; //PTBR
            [R3 + 15] = 10; //PTLR
            breakpoint;
            return;
        endif;
        R0 = R0 + 1;
    endwhile;
    R0 = -1;
    breakpoint;
    return;
endif;

//Free User Area Page
if(functionNum==2) then
    R4 = 496;
    R5 = [PROCESS_TABLE + currentPID*16 + 11]*512  + R4;
    while(R4<512) do
        if([R5] == SEMAPHORE) then
            multipush(R0,R1,R2,R3,R4);
            R1 = RELEASE_SEMAPHORE; //Function 7
            R2 = [R5 + 1];
            R3 = currentPID;   
            call RESOURCE_MANAGER; //Mod 0
            multipop(R0,R1,R2,R3,R4);
        endif;
        if([R5] == FILE) then
            multipush(R0,R1,R2,R3,R4);
            R1 = CLOSE; //Function 4
            R2 = [R5 + 1];
            call MOD_3; //File Manager
            multipop(R0,R1,R2,R3,R4);
        endif;
        R4 = R4 + 2;
    endwhile;
    multipush(R1,R2);
    R3 = [PROCESS_TABLE + currentPID*16 + 11];
    R1 = 2;
    R2 = R3;
    call MOD_2;
    multipop(R1,R2);
    breakpoint;
    return;
endif;

//Exit Process
if(functionNum==3) then
    if([PROCESS_TABLE + currentPID*16 + 9] != 9) then
        R3 = 0;
        while(R3<16) do
            R4 = PROCESS_TABLE + R3*16;
            if([R4 + 4]==WAIT_PROCESS && [R4 + 5]==currentPID) then
                [R4 + 4] = READY;
                [R4 + 5] = -1;
            endif;
            if([R4 + 2] == currentPID) then
                [R4 + 2] = -1;
            endif;
            R3 = R3 + 1;
        endwhile;
    endif;
    multipush(R1,R2);
    R1=4;
    call MOD_1; //Free Page Table
    multipop(R1,R2);
    multipush(R1,R2);
    R1=2;
    call MOD_1; //Free User Area Page
    multipop(R1,R2);
    [PROCESS_TABLE + currentPID*16 + 4] = TERMINATED;
    breakpoint;
    return;
endif;

//Free Page Table
if(functionNum==4) then
    R4 = PAGE_TABLE_BASE + 20*currentPID;
    [R4 + 0] = -1;
    [R4 + 1] = "0000";
    [R4 + 2] = -1;
    [R4 + 3] = "0000";
    R3 = 4;
    R4 = PAGE_TABLE_BASE + 20*currentPID;
    while(R3<20) do
        if([R3+R4]!=-1)then
            multipush(R1,R2,R3,R4);
            R1 = 2;
            R2 = [R3+R4];
            call MOD_2;
            multipop(R1,R2,R3,R4);
        endif;
        [R4+R3] = -1;
        [R4+R3+1] = "0000";
        R3=R3+2;
    endwhile;

    //Release block entries of Heap and Stack
    R5 = currentPID;
    R4 = 2;
    while(R4<=3) do
        if([DISK_MAP_TABLE + 10*R5 + R4]!=-1) then
            multipush(R0,R1,R2,R3,R4,R5);
            R1 = 4;
            R2 = [DISK_MAP_TABLE + 10*R5 + R4];
            R3 = R5;
            call MOD_2;
            multipop(R0,R1,R2,R3,R4,R5);
        endif;
        if([DISK_MAP_TABLE + 10*R5 + R4 + 6]!=-1) then
            multipush(R0,R1,R2,R3,R4,R5);
            R1 = 4;
            R2 = [DISK_MAP_TABLE + 10*R5 + R4];
            R3 = R5;
            call MOD_2;
            multipop(R0,R1,R2,R3,R4,R5);
        endif;
        R4 = R4 + 1;
    endwhile;

    //Invalidate all entries of disk map table
    R4 = 0;
    while(R4 < 10) do
        [DISK_MAP_TABLE + 10*currentPID + R4] = -1;
        R4 = R4 + 1;
    endwhile;
    breakpoint;
    return;
endif;

//Kill all
if(functionNum == 5)then
    //Lock all files to ensure that no process is in middle of operation
    R3 = 0;
    while(R3 < MAX_FILE_NUM)do
        if([INODE_TABLE + R3*16 + 1]!=-1)then
            //Lock file using acquire_inode()
            multipush(R1,R2,R3);
            R1 = ACQUIRE_INODE; //function 4
            R2 = R3;
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call MOD_0;
            multipop(R1,R2,R3);
        endif;
        R3 = R3 + 1;
    endwhile;
    //For each pid from 2 to MaxProc - 1
    R3 = 2;
    while(R3 < MAX_PROC_NUM)do
        if(R3 != currentPID && [R4 + 4] != TERMINATED)then
            //Call exit_process()
            multipush(R1,R2,R3);
            R1 = EXIT_PROCESS; //function 3
            R2 = [SYSTEM_STATUS_TABLE + 1];
            call MOD_1;
            multipop(R1,R2,R3);
        endif;
        R3 = R3 + 1;
    endwhile;
    //For each valid entry in inode table
    R3 = 0;
    while(R3 < MAX_FILE_NUM)do
        if([INODE_TABLE + R3*16 + 1]!=-1)then
            //Release lock on file using release_inode()
            multipush(R1,R2,R3);
            R1 = RELEASE_INODE; //function 5
            R2 = R3;
            R3 = [SYSTEM_STATUS_TABLE + 1];
            call MOD_0;
            multipop(R1,R2,R3);
        endif;
        R3 = R3 + 1;
    endwhile;
    breakpoint;
    return;
endif;

breakpoint;
return;