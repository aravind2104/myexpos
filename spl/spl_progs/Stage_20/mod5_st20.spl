breakpoint;
//Get pid of current process
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

//Push BP to top of Kernel Stack
multipush(BP);

//Get current process table entry
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID*16;
//Save the SP%512, PTBR and PTLR to the Kernel SP, PTBR and PTLR fields of the Process Table entry of the current process  
[process_table_entry + 12] = SP%512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

//Scheduling Algo
alias newPID R2;
newPID = currentPID+1;
newPID = newPID%16;
while(newPID != currentPID) do
    if(newPID!=0) then
        if([PROCESS_TABLE + newPID*16 + 4]==READY) then
            break;
        endif;
        if([PROCESS_TABLE + newPID*16 + 4]==CREATED) then
            break;
        endif;
    endif;
    newPID = newPID + 1;
    newPID = newPID % 16;
endwhile;
if(newPID == currentPID) then
    newPID = 0;
endif;

//Set SP,PTBR,PTLR for new process
alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID*16;
SP = [new_process_table + 11]*512 + [new_process_table+12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];
//Set pid in System status table
[SYSTEM_STATUS_TABLE + 1] = newPID;

//If new process is CREATED, then nothing to restore
if([new_process_table + 4] == CREATED) then
    [new_process_table + 4] = RUNNING;
    SP = [new_process_table + 13];
    [new_process_table + 9] = 0;
    BP = [[new_process_table + 11]*512];
    breakpoint;
    ireturn;
endif;

[new_process_table + 4] = RUNNING;
//restore BP
multipop(BP);

breakpoint;
return;
