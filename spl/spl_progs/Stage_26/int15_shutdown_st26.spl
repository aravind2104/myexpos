//Shutdown System call has number 21
//Switch to Kernel Stack and set MODE Flag
alias userSP R0;
userSP = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 -1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 21; //Syscall for Shutdown

//Shutdown can be invoked only from shell
//If current process not shell(PID 2), or current user not root(USERID 1)
if([SYSTEM_STATUS_TABLE + 1] != 2 || [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 3] != 1)then
    //return -1
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0;
    [[PTBR + ((userSP-1)/512)*2]*512 + (userSP-1)%512] = -1;//Return value
    SP = userSP;
    breakpoint;
    ireturn;
endif;

//Kill all user processes except the idle, login and current process(shell) by calling kill_all()
multipush(R0);
R1 = KILL_ALL; //function 5
R2 = [SYSTEM_STATUS_TABLE + 1];
call MOD_1;
multipop(R0);

//Loop through Buffer Table
R1 = 0;
while(R1<4)do
    //If buffer is dirty
    if([BUFFER_TABLE + R1*4 + 1] == 1)then
        //Commit changes to the disk by calling disk_store()
        multipush(R0,R1);
        R3 = 71 + R1;
        R4 = [BUFFER_TABLE + R1*4];
        R1 = DISK_STORE;
        R2 = [SYSTEM_STATUS_TABLE + 1];
        call MOD_4;
        multipop(R0,R1);
    endif;
    R1 = R1 + 1;
endwhile;

//Commit changes made in memory copies to disk
//INODE Table(Pages 59-60, Disk 3-4)
multipush(R0);
R1 = DISK_STORE; //Function 1
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 59;
R4 = 3;
call MOD_4; //Device Manager
R1 = DISK_STORE; //Function 1
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 60;
R4 = 4;
call MOD_4;

//ROOT FILE(Pages 62, Disk 5)
R1 = DISK_STORE; //Function 1
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 62;
R4 = 5;
call MOD_4;

//DISK FREE LIST(Pages 61,Disk 2)
R1 = DISK_STORE; //Function 1
R2 = [SYSTEM_STATUS_TABLE + 1];
R3 = 61;
R4 = 2;
call MOD_4;
multipop(R0);

//Halt the System
halt;