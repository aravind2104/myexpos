breakpoint;
//Get pid of current process
alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];

//Push BP to top of Kernel Stack
multipush(BP);

//Get current process table entry
alias ptEntry R1;
ptEntry = PROCESS_TABLE + currentPID*16;
//Save the SP%512, PTBR and PTLR to the Kernel SP, PTBR and PTLR fields of the Process Table entry of the current process  
[ptEntry + 12] = SP%512;
[ptEntry + 14] = PTBR;
[ptEntry + 15] = PTLR;

alias newPID R2;
//If Paging is ongoing
if([SYSTEM_STATUS_TABLE + 5]!=0)then
    //If paging process is blocked(Disk operation)
    if([PROCESS_TABLE + 15*16 + 4] == WAIT_DISK)then
        //Schedule idle
        newPID = 0;
    else
        //Schedule Swapper Daemon
        newPID = 15;
    endif;
else //If paging not going on, normal Round Robin
    //SCheduling algo
    newPID = currentPID+1;
    newPID = newPID%16; //To avoid swapper daemon
    while(newPID != currentPID) do
        if(newPID!=15 && newPID!=0 && [PROCESS_TABLE + newPID*16 + 6] == 0) then //Also check if process is not swapped out
            if([PROCESS_TABLE + newPID*16 + 4]==READY) then
                break;
            endif;
            if([PROCESS_TABLE + newPID*16 + 4]==CREATED) then
                break;
            endif;
        endif;
        newPID = newPID + 1;
        newPID = newPID % 16; //To avoid swapper daemon
    endwhile;
    if(newPID == currentPID) then
        newPID = 0;
    endif;
endif;


//Set SP,PTBR,PTLR for new process
alias newPtEntry R3;
newPtEntry = PROCESS_TABLE + newPID*16;
SP = [newPtEntry + 11]*512 + [newPtEntry+12];
PTBR = [newPtEntry + 14];
PTLR = [newPtEntry + 15];
//Set pid in System status table
[SYSTEM_STATUS_TABLE + 1] = newPID;

//If new process is CREATED, then nothing to restore
if([newPtEntry + 4] == CREATED) then
    [newPtEntry + 4] = RUNNING;
    SP = [newPtEntry + 13];
    [newPtEntry + 9] = 0;
    BP = [[newPtEntry + 11]*512];
    breakpoint;
    ireturn;
endif;

[newPtEntry + 4] = RUNNING;

//restore BP
multipop(BP);

breakpoint;
return;
